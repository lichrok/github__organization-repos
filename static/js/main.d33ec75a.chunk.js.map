{"version":3,"sources":["serviceWorker.ts","utils/debounce.ts","core/enums/request-status.ts","redux/actions/index.ts","core/models/actions.ts","components/search-form/styles.ts","components/search-form/search-form.tsx","components/repo-list/styles.ts","components/repo-list/repo-card.tsx","components/repo-list/repo-list.tsx","appStyles.ts","App.tsx","redux/reducers/index.ts","core/api/repository.ts","core/api/api.ts","core/mappers/repository.mapper.ts","redux/sagas/index.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","useDebounce","RequestStatus","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","ActionCreator","org","page","type","payload","useStyles","makeStyles","theme","header","position","top","left","zIndex","width","backgroundColor","padding","spacing","searchForm","borderRadius","searchInput","typography","h5","color","connect","dispatch","onSubmit","classes","setValue","debouncedSearchTerm","className","Container","maxWidth","event","preventDefault","InputBase","placeholder","onChange","target","container","breakpoints","values","md","paddingTop","card","marginBottom","boxShadow","borderBottom","cardContent","display","flexDirection","height","statList","marginTop","stat","fill","marginRight","STATISTIC_ICONS","Map","StarIcon","VisibilityIcon","CallSplitIcon","RepoCard","name","description","url","statistics","statisticInfo","Object","entries","map","count","Icon","get","Badge","badgeContent","max","showZero","key","Card","CardContent","Typography","gutterBottom","component","Link","href","rel","variant","paragraph","connector","state","repositories","status","pageCount","onPaginationChange","setPage","hasRepositories","length","notFoundMessage","noReposMessage","Pending","Box","textAlign","CircularProgress","Success","Grid","repository","item","xs","justifyContent","mt","Pagination","Error","app","minHeight","App","initialState","reducer","action","assign","api","axios","create","baseURL","getRepositories","perPage","params","per_page","then","response","link","headers","parseLinkHeader","last","data","parseRepository","html_url","forks","forks_count","stargazers","stargazers_count","watchers","watchers_count","_getRepositories","actionWatcher","rootSaga","put","call","Number","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d33ec75a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useState, useEffect } from 'react';\n\nfunction useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n","export enum RequestStatus {\n  Pending,\n  Success,\n  Error,\n}\n","import { Repository } from '../../core/models/repository';\nimport {\n  GET_REPOSITORIES,\n  SET_REPOSITORIES,\n  SET_REQUEST_STATUS,\n} from '../../core/models/actions';\n\nexport const ActionCreator = {\n  getRepositories: (org: string, page = 1) => {\n    return {\n      type: GET_REPOSITORIES,\n      payload: {\n        org,\n        page,\n      },\n    };\n  },\n\n  setRepositories: (repositories: Repository[]) => {\n    return {\n      type: SET_REPOSITORIES,\n      payload: {\n        repositories,\n      },\n    };\n  },\n\n  setRequestStatus: (status: string | null) => {\n    return {\n      type: SET_REQUEST_STATUS,\n      payload: {\n        status,\n      },\n    };\n  },\n};\n","import { Repository } from './repository';\nimport { RequestStatus } from '../enums/request-status';\n\nexport const GET_REPOSITORIES = `GET_REPOSITORIES`;\nexport const SET_REPOSITORIES = `SET_REPOSITORIES`;\nexport const SET_REQUEST_STATUS = `SET_REQUEST_STATUS`;\n\nexport interface SetRepositoriesAction {\n  type: typeof SET_REPOSITORIES;\n  payload: {\n    repositories: Repository[];\n    pageCount: number;\n  };\n}\n\nexport interface SetRequestAction {\n  type: typeof SET_REQUEST_STATUS;\n  payload: {\n    status: RequestStatus;\n  };\n}\n\nexport interface GetRepositoriesAction {\n  type: typeof GET_REPOSITORIES;\n  payload: {\n    org: string;\n    page: number;\n  };\n}\n\nexport type RepositoriesActionTypes =\n  | SetRepositoriesAction\n  | SetRequestAction\n  | GetRepositoriesAction;\n","import { Theme, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  header: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    zIndex: 3,\n    width: '100%',\n    backgroundColor: '#252a2f',\n    padding: theme.spacing(4, 0),\n  },\n  searchForm: {\n    backgroundColor: '#45494d',\n    borderRadius: '6px',\n  },\n  searchInput: {\n    padding: theme.spacing(1, 2),\n    ...theme.typography.h5,\n    color: '#fff',\n    width: '100%',\n  },\n}));\n","import React, { useState, useEffect, Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport Container from '@material-ui/core/Container';\nimport InputBase from '@material-ui/core/InputBase';\nimport useDebounce from '../../utils/debounce';\nimport { ActionCreator } from '../../redux/actions';\nimport { useStyles } from './styles';\n\ninterface Props {\n  onSubmit: (value: string) => void;\n}\n\nconst TYPING_DELAY = 800;\n\nconst SearchForm = ({ onSubmit }: Props) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(``);\n  const debouncedSearchTerm = useDebounce(value, TYPING_DELAY);\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      onSubmit(value);\n    }\n  }, [debouncedSearchTerm, onSubmit, value]);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onSubmit(value);\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(event.target.value);\n\n  return (\n    <div className={classes.header}>\n      <Container maxWidth=\"md\" >\n        <form\n          className={classes.searchForm}\n          onSubmit={handleSubmit}\n        >\n          <InputBase\n            className={classes.searchInput}\n            placeholder=\"Start to type organization...\"\n            value={value}\n            onChange={handleInputChange}\n          />\n        </form>\n      </Container>\n    </div>\n  );\n}\n\nexport const mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  onSubmit(org: string) {\n    dispatch(ActionCreator.getRepositories(org));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(SearchForm);\n","import { Theme, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    maxWidth: theme.breakpoints.values.md,\n    paddingTop: '120px'\n  },\n  card: {\n    width: \"100%\",\n    marginBottom: '20px',\n    backgroundColor: 'transparent',\n    boxShadow: 'none',\n    borderBottom: '1px solid #e1e4e8'\n  },\n  cardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  },\n  statList: {\n    marginTop: '8px'\n  },\n  stat: {\n    display: 'inline-block',\n    color: '#6a737d',\n\n    '& svg': {\n      height: '18px',\n      width: 'auto',\n      fill: '#6a737d',\n    },\n    '&:not(:last-child)': {\n      marginRight: theme.spacing(3),\n    }\n  },\n}));\n","import React from 'react';\nimport Badge from '@material-ui/core/Badge';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Link from '@material-ui/core/Link';\nimport StarIcon from '@material-ui/icons/Star';\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { Repository as Props } from '../../core/models/repository';\nimport { useStyles } from './styles';\n\nconst STATISTIC_ICONS = new Map([\n  [\"stargazers\", StarIcon],\n  [\"watchers\", VisibilityIcon],\n  [\"forks\", CallSplitIcon],\n]);\n\nconst RepoCard = ({\n  name,\n  description,\n  url,\n  statistics,\n}: Props) => {\n  const classes = useStyles();\n\n  const statisticInfo = Object.entries(statistics).map(([name, count]) => {\n    const Icon = STATISTIC_ICONS.get(name);\n\n    return (\n      <Badge\n        className={classes.stat}\n        badgeContent={count}\n        max={999}\n        showZero\n        key={name}\n      >\n        {Icon && <Icon />}\n      </Badge>\n      \n    );\n  });\n\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.cardContent}>\n        <Typography gutterBottom component=\"h2\">\n          <Link href={url} target=\"_blank\" rel=\"norefferer\">\n            {name}\n          </Link>\n        </Typography>\n        {description && (\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n            paragraph\n          >\n            {description}\n          </Typography>\n        )}\n        <div className={classes.statList}>{statisticInfo}</div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default RepoCard;\n","import React, { useState, useEffect, Dispatch } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Pagination from '@material-ui/lab/Pagination';\nimport RepoCard from './repo-card';\nimport { ActionCreator } from '../../redux/actions';\nimport { Repository } from '../../core/models/repository';\nimport { RequestStatus } from '../../core/enums/request-status';\nimport { State } from '../../core/models/state';\nimport { useStyles } from './styles';\n\nconst mapStateToProps = (state: State) => ({\n  repositories: state.repositories,\n  org: state.org,\n  status: state.status,\n  pageCount: state.pageCount,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  onPaginationChange(org: string, page: number) {\n    dispatch(ActionCreator.getRepositories(org, page));\n  },\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux & {\n  repositories: Repository[] | null;\n  status: RequestStatus;\n  pageCount: number;\n  org: string;\n  onPaginationChange: (org: string, page: number) => void;\n};\n\nconst RepoList = ({\n  repositories,\n  status,\n  pageCount,\n  org,\n  onPaginationChange,\n}: Props) => {\n  const classes = useStyles();\n  const [page, setPage] = useState(1);\n  const hasRepositories = !!repositories?.length;\n  const notFoundMessage = (\n    <Typography variant=\"h5\" component=\"p\">\n      Wrong organization name \n    </Typography>\n  );\n  const noReposMessage = (\n    <Typography variant=\"h5\" component=\"p\">\n      No repositories.\n    </Typography>\n  );\n\n  useEffect(() => {\n    setPage(1);\n  }, [org]);\n\n  return (\n    <Container className={classes.container}>\n      {status === RequestStatus.Pending && (\n        <Box textAlign=\"center\">\n          <CircularProgress />\n        </Box>\n      )}\n\n      {status === RequestStatus.Success && (\n        <>\n          <Box>\n            {!hasRepositories && noReposMessage}\n            <Grid container>\n              {repositories?.map((repository) => {\n                return (\n                  <Grid item xs={12} key={repository.url}>\n                    <RepoCard {...repository} />\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </Box>\n          \n          {pageCount > 0 && hasRepositories && (\n            <Box display=\"flex\" justifyContent=\"center\" mt={3}>\n              <Pagination\n                count={pageCount}\n                page={page}\n                onChange={(event: object, page: number) => {\n                  onPaginationChange(org, page);\n                  setPage(page);\n                }}\n                color=\"primary\"\n              />\n            </Box>\n          )}\n        </>\n      )}\n\n      {status === RequestStatus.Error && notFoundMessage}\n    </Container>\n  );\n}\n\nexport default connector(RepoList);\n","import { Theme, makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  app: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(5, 0),\n    minHeight: '100vh',\n  }\n}));\n","import React from \"react\";\nimport SearchForm from \"./components/search-form/search-form\";\nimport RepoList from \"./components/repo-list/repo-list\";\nimport { useStyles } from './appStyles';\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.app}>\n      <SearchForm />\n      <RepoList />\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  RepositoriesActionTypes,\n  GET_REPOSITORIES,\n  SET_REPOSITORIES,\n  SET_REQUEST_STATUS,\n} from '../../core/models/actions';\n\nconst initialState = {\n  repositories: [],\n  status: null,\n  pageCount: 0,\n  org: ``,\n};\n\nconst reducer = (state = initialState, action: RepositoriesActionTypes) => {\n  switch (action.type) {\n    case GET_REPOSITORIES:\n      return Object.assign({}, state, {\n        org: action.payload.org,\n      });\n\n    case SET_REPOSITORIES:\n      return Object.assign({}, state, {\n        repositories: action.payload.repositories,\n        pageCount: action.payload.pageCount || state.pageCount,\n      });\n\n    case SET_REQUEST_STATUS:\n      return Object.assign({}, state, {\n        status: action.payload.status,\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createApi } from './api';\nimport parseLinkHeader from 'parse-link-header';\nimport { RepositoryResponse } from '../models/repository-response';\n\nconst api = createApi();\n\nexport const getRepositories = ({\n  org,\n  perPage = 12,\n  page = 1,\n}: {\n  org: string;\n  perPage?: number;\n  page?: number;\n}) =>\n  api\n    .get<RepositoryResponse[]>(`/orgs/${org}/repos`, {\n      params: {\n        per_page: perPage,\n        page,\n      },\n    })\n    .then((response) => {\n      const link = response.headers.link as string;\n      const pageCount = parseLinkHeader(link)?.last?.page;\n      const repositories = response.data;\n\n      return { repositories, pageCount };\n    });\n","import axios from 'axios';\n\nexport const createApi = () => {\n  const api = axios.create({\n    baseURL: `https://api.github.com/`,\n  });\n\n  return api;\n};\n","import { RepositoryResponse } from '../models/repository-response';\nimport { Repository } from '../models/repository';\n\nexport const parseRepository = (repository: RepositoryResponse): Repository => {\n  const {\n    name,\n    description,\n    html_url: url,\n    forks_count: forks,\n    stargazers_count: stargazers,\n    watchers_count: watchers,\n  } = repository;\n\n  return {\n    name,\n    description,\n    url,\n    statistics: {\n      forks,\n      stargazers,\n      watchers,\n    },\n  };\n};\n","import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { getRepositories } from '../../core/api/repository';\nimport {\n  GetRepositoriesAction,\n  SET_REQUEST_STATUS,\n  SET_REPOSITORIES,\n} from '../../core/models/actions';\nimport { parseRepository } from '../../core/mappers/repository.mapper';\nimport { RequestStatus } from '../../core/enums/request-status';\n\nfunction* _getRepositories(action: GetRepositoriesAction) {\n  try {\n    yield put({\n      type: SET_REQUEST_STATUS,\n      payload: { status: RequestStatus.Pending },\n    });\n\n    const org = action.payload.org;\n    const page = action.payload.page;\n    const data = yield call(getRepositories, { org, page });\n    const repositories = data.repositories.map(parseRepository);\n    const pageCount = Number(data.pageCount);\n\n    yield put({\n      type: SET_REPOSITORIES,\n      payload: {\n        repositories,\n        pageCount,\n      },\n    });\n\n    yield put({\n      type: SET_REQUEST_STATUS,\n      payload: { status: RequestStatus.Success },\n    });\n  } catch (error) {\n    yield put({\n      type: SET_REQUEST_STATUS,\n      payload: { status: RequestStatus.Error },\n    });\n  }\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(`GET_REPOSITORIES`, _getRepositories);\n}\n\nexport default function* rootSaga() {\n  yield all([actionWatcher()]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport App from \"./App\";\nimport reducer from \"./redux/reducers\";\nimport rootSaga from \"./redux/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}